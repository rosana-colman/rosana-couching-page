---
import { Card, CardContent, CardHeader, CardTitle } from "../react/ui/card";
import SectionStars from "../react/SectionStars";
import ProcessSection from "./ProcessSection.astro";

const services = [
  {
    id: "constelaciones",
    title: "Nuevas Constelaciones Familiares",
    description:
      "Las Constelaciones Familiares son un fenómeno de realidad espiritual que se manifiestan en una realidad material. <br/>Este fenómeno nos permite ver para sanar. <br/>Identificar una problemática que esta afectando nuestra vida, y darle lugar a aquello que no fue visto antes. <br/><br/><br/><br/>",
    features: ["Sesiones individuales", "Talleres grupales"],
    leftContent: `
      <h3 class="text-2xl font-medium text-[#4A4558] mb-4">¿Qué son las Constelaciones Familiares?</h3>
      <p>
        Todo aquello que afecta nuestra vida, cualquier problema que se nos presente, una situación de pareja, un conflicto laboral, una enfermedad, temas de dinero… Todo eso y mas, se puede constelar. 
      <p/>
      <br/>
      <p>
        Las constelaciones nos muestran un conflicto no resuelto, un pendiente, alguien que fue excluido de nuestro sistema…y por resonancia se manifiesta en nosotros, una situación que nos excede, algo que solos no podemos resolver y que muchas veces su origen proviene de nuestro sistema familiar, de nuestros ancestros.  
      <p/>
      <br/>
      <p>
        Repetimos patrones de conducta, sostenemos inconscientemente lealtades familiares. 
      <p/>
      <br/>
      <p>
        Las constelaciones familiares nos permiten "ver para sanar". Sacar a la luz aquello que no fue visto antes, nos permite no solo sanar nosotros mismos sino también sanar nuestro sistema. 
      <p/>
    `,
    rightContent: `
      <h3 class="text-2xl font-medium text-[#4A4558] mb-4">Rosana Colman</h3>
      <p>
        Coach Ontológico y Sistemico y Consteladora Familiar.
      </p>
      <p>
        Fundadora de la Escuela de Constelaciones Familiares de Chile.
      </p>
    `,
  },
  {
    id: "coaching",
    title: "Coaching Ontológico y Sistemico",
    description:
      "El coaching ontológico y sistémico es una herramienta poderosa al momento de tomar las riendas de nuestra vida. <br/>Cuando queremos obtener un resultado, y pese a hacer nuestro máximo esfuerzo no podemos lograrlo, puede  que haya alguna situación que va más allá de nuestro deseo y voluntad de poder cambiar ese resultado. <br/>Un proceso transformador que te ayuda a desarrollar nuevas formas de observar, interpretar y actuar en tu vida, permitiéndote alcanzar resultados extraordinarios.",
    features: ["Sesiones individuales"],
    showProcess: true,
  },
  {
    id: "talleres",
    title: "Talleres y Cursos (Proximamente...)",
    description:
      "Programas diseñados para grupos que buscan desarrollar habilidades específicas y profundizar en temas relacionados con el desarrollo personal y profesional.<br/><br/>",
    features: ["Proximamente...."],
    leftContent: `
      <h3 class="text-2xl font-medium text-[#4A4558] mb-4">Proximamente....</h3>
    `,
    rightContent: `
    `,
  },
];
---

<section id="services" class="snap-section bg-[#D6E6E1] relative">
  <div class="container mx-auto px-4 py-4 sm:py-4 2xl:py-20">
    <h2
      class="text-xl sm:text-2xl md:text-4xl font-belleza text-[#4A4558] text-left mb-4 sm:mb-6 md:mb-12"
    >
      Servicios
    </h2>

    <div id="services-container" class="flex flex-col items-center">
      <!-- Versión escritorio (visible en md+) -->
      <div class="hidden md:block w-full">
        <div
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 transition-all duration-500 w-full max-w-6xl mx-auto"
          id="services-cards"
        >
          {
            services.map((service) => (
              <Card
                class="bg-[#F8F8F5] border-[#4A4558]/10 hover:border-[#4A4558]/20 transition-all duration-300 compact-card"
                data-service={service.id}
              >
                <CardHeader class="text-center py-6">
                  <CardTitle class="text-[#4A4558] text-xl font-medium">
                    {service.title}
                  </CardTitle>
                </CardHeader>
                <CardContent class="px-6">
                  <p
                    class="text-[#4A4558]/80 mb-6 service-description text-center"
                    set:html={service.description}
                  />
                  <ul class="space-y-3 mb-6 service-features">
                    {service.features.map((feature) => (
                      <li class="flex items-start">
                        <svg
                          class="w-5 h-5 text-[#4A4558] mt-0.5 mr-2"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M5 13l4 4L19 7"
                          />
                        </svg>
                        <span class="text-[#4A4558]/80">{feature}</span>
                      </li>
                    ))}
                  </ul>
                  <div class="flex items-end justify-center w-full h-full">
                    <button
                      class="w-full bg-[#4A4558] text-[#F8F8F5] hover:bg-[#4A4558]/90 border-[#4A4558] rounded-md px-4 py-2 more-info-btn"
                      data-service={service.id}
                    >
                      Más información
                    </button>
                  </div>
                </CardContent>
              </Card>
            ))
          }
        </div>

        {/* Sección detallada (para desktop, inicialmente oculta) */}
        <div
          class="hidden mt-12 grid-cols-1 lg:grid-cols-2 gap-8 md:mt-4 2xl:mt-12"
          id="detailed-section"
        >
          {/* Cuadrante izquierdo - Ahora el gráfico */}
          <div class="bg-transparent p-6" id="left-quadrant">
            {
              services.map((service) => (
                <div id={`right-${service.id}`} class="service-content hidden">
                  {service.showProcess ? (
                    <ProcessSection />
                  ) : (
                    <div set:html={service.leftContent} />
                  )}
                </div>
              ))
            }
          </div>

          {/* Cuadrante derecho - Ahora el logo */}
          <div
            class="bg-transparent p-6 flex items-center justify-center"
            id="right-quadrant"
          >
            {
              services.map((service) => (
                <div
                  id={`left-${service.id}`}
                  class="service-content hidden"
                  set:html={
                    service.id === "coaching" ? "" : service.rightContent
                  }
                />
              ))
            }
            <div
              id="brand-logo"
              class="hidden w-full flex justify-center items-center"
            >
              <div class="logo-container animate-float">
                <div class="logo-circle circle-1"></div>
                <div class="logo-circle circle-2"></div>
                <div class="logo-circle circle-3"></div>
                <span class="circle-label label-1">Cuerpo</span>
                <span class="circle-label label-2">Mente</span>
                <span class="circle-label label-3">Emoción</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Versión móvil (Sistema de acordeón, solo visible en <md) -->
      <div class="md:hidden w-full">
        <div class="space-y-3 w-full" id="mobile-accordion">
          {
            services.map((service) => (
              <div
                class="mobile-service-card bg-[#F8F8F5] rounded-lg shadow-sm overflow-hidden border border-[#4A4558]/10"
                data-service={service.id}
              >
                {/* Cabecera del acordeón (siempre visible) */}
                <div class="accordion-header px-4 py-3 flex justify-between items-center cursor-pointer">
                  <h3 class="text-[#4A4558] font-medium text-base">
                    {service.title}
                  </h3>
                  <svg
                    class="accordion-icon w-5 h-5 text-[#4A4558] transform transition-transform duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </div>

                {/* Contenido del acordeón (inicialmente oculto) */}
                <div class="accordion-content px-4 pb-4 hidden">
                  {/* Descripción básica */}
                  <p
                    class="text-[#4A4558]/80 text-sm mb-3"
                    set:html={service.description}
                  />

                  {/* Características */}
                  <div class="mb-4">
                    <h4 class="text-[#4A4558] font-medium text-sm mb-2">
                      Características:
                    </h4>
                    <ul class="space-y-1">
                      {service.features.map((feature) => (
                        <li class="flex items-start">
                          <svg
                            class="w-4 h-4 text-[#4A4558] mt-0.5 mr-1 flex-shrink-0"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M5 13l4 4L19 7"
                            />
                          </svg>
                          <span class="text-[#4A4558]/80 text-xs">
                            {feature}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Contenido detallado */}
                  <div class="service-detail-container">
                    {service.showProcess ? (
                      <div class="process-container">
                        <h4 class="text-[#4A4558] font-medium text-sm mb-2 text-center">
                          Proceso
                        </h4>
                        <ProcessSection />
                      </div>
                    ) : (
                      <div class="grid grid-cols-1 gap-4">
                        <div
                          class="left-content text-xs"
                          set:html={service.leftContent}
                        />
                        <div
                          class="right-content text-xs"
                          set:html={service.rightContent}
                        />
                      </div>
                    )}

                    {/* Logo para Coaching */}
                    {service.id === "coaching" && (
                      <div class="flex justify-center mt-4">
                        <div class="logo-container-mobile">
                          <div class="logo-circle circle-1" />
                          <div class="logo-circle circle-2" />
                          <div class="logo-circle circle-3" />
                          <span class="circle-label label-1">Cuerpo</span>
                          <span class="circle-label label-2">Mente</span>
                          <span class="circle-label label-3">Emoción</span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
  <SectionStars client:load startX={25} startY={0} endX={75} endY={100} />
</section>

<style>
  .service-content h3 {
    text-align: center;
    margin-bottom: 1rem;
    font-size: 1.25rem;
  }

  @media (min-width: 640px) {
    .service-content h3 {
      margin-bottom: 1.5rem;
      font-size: 1.5rem;
    }
  }

  .service-content ul {
    max-width: 400px;
    margin: 0 auto;
  }

  .service-content p {
    max-width: 500px;
    margin: 0 auto;
    text-align: center;
    font-size: 0.875rem;
  }

  @media (min-width: 640px) {
    .service-content p {
      font-size: 1rem;
    }
  }

  /* Estilos para las cards compactadas */
  .compact-card {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }

  /* Solo aplicar estilos compactados en desktop */
  @media (min-width: 768px) {
    .compact-card.is-compact {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.75rem;
      min-height: auto;
      max-height: 60px;
    }

    .compact-card.is-compact .card-header {
      margin: 0;
      padding: 0;
    }

    .compact-card.is-compact .more-info-btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
      margin: 0;
      opacity: 0.8;
      transition: opacity 0.3s ease;
    }
  }

  .compact-card .more-info-btn:hover {
    opacity: 1;
  }

  .compact-card::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, #4a4558, transparent);
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .compact-card:hover::after {
    transform: scaleX(1);
  }

  .compact-card:hover {
    transform: translateY(-2px);
    box-shadow:
      0 4px 6px -1px rgba(74, 69, 88, 0.1),
      0 2px 4px -1px rgba(74, 69, 88, 0.06);
  }

  .compact-card.active {
    background-color: #4a4558;
    color: #f8f8f5;
  }

  .compact-card.active .card-title {
    color: #f8f8f5;
  }

  /* Estilos para el logo */
  .logo-container,
  .logo-container-mobile {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .logo-container {
    width: 300px;
    height: 300px;
  }

  .logo-container-mobile {
    width: 180px;
    height: 180px;
  }

  .logo-circle {
    position: absolute;
    border: 2px solid #4a4558;
    border-radius: 50%;
  }

  .logo-container .logo-circle {
    width: 180px;
    height: 180px;
  }

  .logo-container-mobile .logo-circle {
    width: 100px;
    height: 100px;
  }

  .logo-container .circle-1 {
    transform: translateX(-70px);
  }

  .logo-container .circle-2 {
    transform: translateX(70px);
  }

  .logo-container .circle-3 {
    transform: translateY(90px);
  }

  .logo-container-mobile .circle-1 {
    transform: translateX(-40px);
  }

  .logo-container-mobile .circle-2 {
    transform: translateX(40px);
  }

  .logo-container-mobile .circle-3 {
    transform: translateY(50px);
  }

  .logo-container .circle-label {
    position: absolute;
    font-size: 1rem;
    font-weight: 500;
    color: #4a4558;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .logo-container-mobile .circle-label {
    position: absolute;
    font-size: 0.7rem;
    font-weight: 500;
    color: #4a4558;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .logo-container .label-1 {
    top: 40px;
    left: 30px;
    transform: translateY(100px) translateX(10px);
  }

  .logo-container .label-2 {
    top: 40px;
    right: 30px;
    transform: translateY(100px) translateX(-20px);
  }

  .logo-container .label-3 {
    bottom: 40px;
    left: 50%;
    transform: translateX(-50%);
  }

  .logo-container-mobile .label-1 {
    top: 25px;
    left: 20px;
    transform: translateY(60px) translateX(5px);
  }

  .logo-container-mobile .label-2 {
    top: 25px;
    right: 20px;
    transform: translateY(60px) translateX(-10px);
  }

  .logo-container-mobile .label-3 {
    bottom: 25px;
    left: 50%;
    transform: translateX(-50%);
  }

  @media (max-width: 1680px) {
    .logo-container .circle-1 {
      transform: translateX(-70px) translateY(-100px);
    }

    .logo-container .circle-2 {
      transform: translateX(70px) translateY(-100px);
    }

    .logo-container .circle-3 {
      transform: translateY(-10px);
    }

    .logo-container .label-1 {
      top: 40px;
      left: 30px;
      transform: translateY(0) translateX(10px);
    }

    .logo-container .label-2 {
      top: 40px;
      right: 30px;
      transform: translateY(0) translateX(-20px);
    }

    .logo-container .label-3 {
      bottom: 40px;
      left: 50%;
      transform: translateX(-50%) translateY(-100px);
    }
  }

  @keyframes rotate-1 {
    from {
      transform: translateX(-40px) rotate(0deg);
    }
    to {
      transform: translateX(-40px) rotate(360deg);
    }
  }

  .logo-container:hover .logo-circle {
    animation-play-state: paused;
  }

  /* Estilos específicos para el acordeón móvil */
  .mobile-service-card {
    transition: all 0.3s ease;
  }

  .mobile-service-card.active {
    box-shadow: 0 4px 6px -1px rgba(74, 69, 88, 0.1);
  }

  .mobile-service-card.active .accordion-icon {
    transform: rotate(180deg);
  }

  /* Estilos para el contenido del acordeón en móvil */
  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition:
      max-height 0.3s ease,
      padding 0.3s ease;
  }

  .accordion-content.open {
    max-height: none;
    overflow: visible;
  }

  /* Sobrescribir estilos del contenido para móvil */
  .service-detail-container {
    margin-top: 1rem;
  }

  .left-content h3,
  .right-content h3 {
    font-size: 1rem !important;
    margin-bottom: 0.5rem !important;
    text-align: center !important;
  }

  .left-content ul,
  .right-content ul {
    max-width: 100% !important;
    margin-left: 0 !important;
    margin-right: 0 !important;
  }

  .left-content li,
  .right-content li {
    font-size: 0.75rem !important;
    margin-bottom: 0.5rem !important;
  }

  .left-content p,
  .right-content p {
    font-size: 0.75rem !important;
    max-width: 100% !important;
    line-height: 1.4 !important;
    text-align: center !important;
  }

  /* Ajustes para ProcessSection dentro del acordeón */
  .process-container h3,
  .process-container h4 {
    font-size: 0.9rem !important;
    margin-bottom: 0.5rem !important;
    text-align: center !important;
  }

  .process-container p {
    font-size: 0.75rem !important;
    line-height: 1.4 !important;
    margin-bottom: 0.5rem !important;
  }

  /* Ajustes para que las tarjetas se vean completas */
  .mobile-service-card {
    margin-bottom: 0.75rem;
  }

  .mobile-service-card:last-child {
    margin-bottom: 0;
  }
</style>

<script>
  // Tipos para los servicios
  interface Service {
    id: string;
    title: string;
    description: string;
    features: string[];
    leftContent?: string;
    rightContent?: string;
    showProcess?: boolean;
  }

  function initializeServices(): void {
    // Verificar si estamos en móvil o desktop
    const isMobile = window.innerWidth < 768;

    if (isMobile) {
      initializeMobileAccordion();
    } else {
      initializeDesktopCards();
    }

    // Si cambia el tamaño de la ventana, recargar la página
    window.addEventListener("resize", function () {
      const newIsMobile = window.innerWidth < 768;
      if (newIsMobile !== isMobile) {
        location.reload();
      }
    });
  }

  function initializeMobileAccordion(): void {
    const accordionHeaders =
      document.querySelectorAll<HTMLElement>(".accordion-header");
    const accordionContents =
      document.querySelectorAll<HTMLElement>(".accordion-content");
    const mobileServiceCards = document.querySelectorAll<HTMLElement>(
      ".mobile-service-card"
    );

    accordionHeaders.forEach((header, index) => {
      header.addEventListener("click", () => {
        // Obtener el contenido correspondiente a este encabezado
        const content = accordionContents[index];
        const card = mobileServiceCards[index];

        // Comprobar si está abierto
        const isOpen = !content.classList.contains("hidden");

        // Cerrar todos los acordeones
        accordionContents.forEach((cont) => {
          cont.classList.add("hidden");
        });

        mobileServiceCards.forEach((card) => {
          card.classList.remove("active");
        });

        // Si no estaba abierto, abrir este
        if (!isOpen) {
          content.classList.remove("hidden");
          card.classList.add("active");

          // Arreglar los estilos del contenido
          const leftContentElements = content.querySelectorAll(
            ".left-content h3, .right-content h3"
          );
          leftContentElements.forEach((el) => {
            (el as HTMLElement).style.fontSize = "1rem";
            (el as HTMLElement).style.marginBottom = "0.5rem";
            (el as HTMLElement).style.textAlign = "center";
          });

          const listElements = content.querySelectorAll(
            ".left-content ul, .right-content ul"
          );
          listElements.forEach((el) => {
            (el as HTMLElement).style.maxWidth = "100%";
            (el as HTMLElement).style.marginLeft = "0";
            (el as HTMLElement).style.marginRight = "0";
          });

          const listItemElements = content.querySelectorAll(
            ".left-content li, .right-content li"
          );
          listItemElements.forEach((el) => {
            (el as HTMLElement).style.fontSize = "0.75rem";
            (el as HTMLElement).style.marginBottom = "0.5rem";
          });

          const paragraphElements = content.querySelectorAll(
            ".left-content p, .right-content p"
          );
          paragraphElements.forEach((el) => {
            (el as HTMLElement).style.fontSize = "0.75rem";
            (el as HTMLElement).style.maxWidth = "100%";
            (el as HTMLElement).style.lineHeight = "1.4";
            (el as HTMLElement).style.textAlign = "center";
          });

          // También arreglar los estilos para ProcessSection
          const processContainer = content.querySelector(".process-container");
          if (processContainer) {
            // Ajustar estilos del componente ProcessSection si está presente
            const processElements =
              processContainer.querySelectorAll("h3, h4, p");
            processElements.forEach((el) => {
              (el as HTMLElement).style.fontSize = "0.75rem";
              (el as HTMLElement).style.lineHeight = "1.4";
            });

            const processTitles = processContainer.querySelectorAll("h3, h4");
            processTitles.forEach((el) => {
              (el as HTMLElement).style.fontSize = "0.9rem";
              (el as HTMLElement).style.marginBottom = "0.5rem";
            });
          }

          // Asegurar que el elemento sea visible aplicando un height y removiendo overflow hidden
          setTimeout(() => {
            content.style.maxHeight = "none";
            content.style.overflow = "visible";
          }, 10);
        }
      });
    });
  }

  function initializeDesktopCards(): void {
    const cardsContainer = document.getElementById("services-cards");
    const detailedSection = document.getElementById("detailed-section");
    const moreInfoButtons =
      document.querySelectorAll<HTMLButtonElement>(".more-info-btn");
    const descriptions = document.querySelectorAll<HTMLElement>(
      ".service-description"
    );
    const features =
      document.querySelectorAll<HTMLElement>(".service-features");
    const brandLogo = document.getElementById("brand-logo");
    const cards = document.querySelectorAll<HTMLElement>(".card");

    if (!cardsContainer || !detailedSection || !brandLogo) return;

    let isExpanded = false;
    let currentService = "";

    function showDetailedInfo(serviceId: string): void {
      // Ocultar todos los contenidos
      document
        .querySelectorAll<HTMLElement>(".service-content")
        .forEach((content) => {
          content.classList.add("hidden");
        });

      // Actualizar estado de las cards
      cards.forEach((card) => {
        card.classList.remove("active");
        if (card.getAttribute("data-service") === serviceId) {
          card.classList.add("active");
        }
      });

      // Mostrar los contenidos correspondientes al servicio
      const leftContent = document.getElementById(`right-${serviceId}`);
      const rightContent = document.getElementById(`left-${serviceId}`);

      if (serviceId === "coaching") {
        // Para coaching, mostrar el logo en el cuadrante derecho
        if (brandLogo) {
          brandLogo.classList.remove("hidden");
        }
        // Mostrar el proceso en el cuadrante izquierdo
        if (leftContent) {
          leftContent.classList.remove("hidden");
        }
      } else {
        // Para otros servicios, ocultar el logo
        if (brandLogo) {
          brandLogo.classList.add("hidden");
        }
        // Mostrar el contenido específico del servicio
        if (leftContent) {
          leftContent.classList.remove("hidden");
        }
        if (rightContent) {
          rightContent.classList.remove("hidden");
        }
      }

      currentService = serviceId;
    }

    function expandCards(): void {
      if (!isExpanded) {
        // Compactar cards
        descriptions.forEach((desc) => desc.classList.add("hidden"));
        features.forEach((feat) => feat.classList.add("hidden"));

        // Aplicar estilos compactados
        cards.forEach((card) => {
          card.classList.add("is-compact");
        });

        // Mostrar sección detallada para desktop
        if (detailedSection) {
          detailedSection.classList.remove("hidden");
          detailedSection.classList.add("grid");
        }

        isExpanded = true;
      }
    }

    // Manejar clic en "Más información" y en las cards compactadas
    function handleCardClick(serviceId: string): void {
      if (!isExpanded) {
        expandCards();
      }
      showDetailedInfo(serviceId);
    }

    moreInfoButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const serviceId = button.getAttribute("data-service");
        if (serviceId) {
          handleCardClick(serviceId);
        }
      });
    });

    // Agregar evento de clic a las cards compactadas
    cards.forEach((card) => {
      card.addEventListener("click", () => {
        if (isExpanded) {
          const serviceId = card.getAttribute("data-service");
          if (serviceId) {
            handleCardClick(serviceId);
          }
        }
      });
    });
  }

  // Ejecutar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", initializeServices);

  // También ejecutar cuando Astro haya hidratado el componente
  if (document.readyState === "complete") {
    initializeServices();
  }
</script>
